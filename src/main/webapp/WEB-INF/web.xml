
<web-app version="2.5"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <display-name>Archetype Created Web Application</display-name>
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
        <url-pattern>*.css</url-pattern>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <!-- log4j配置文件地址 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:properties/log4j.properties</param-value>
    </context-param>
    <!-- Log4j的监听器要放在spring监听器前面 -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!-- 加载spring容器 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/applicationContext.xml</param-value>
    </context-param>
    
     <context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>fengmai</param-value>
 	 </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--前端控制器-->
    <servlet>
        <servlet-name>mavenTest</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- contextConfigLocation配置springmvc记载的配置文件（配置处理器映射器、适配器等等）
        如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-servlet.xml
         -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springMvc.xml</param-value>
        </init-param>
        <!-- 配置服务器启动后立即加载Spring MVC配置文件 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
	   <servlet-name>mavenTest</servlet-name>
	   <url-pattern>*.do</url-pattern>
	 </servlet-mapping>
	 
    <servlet-mapping>
	   <servlet-name>mavenTest</servlet-name>
	   <url-pattern>*.html</url-pattern>
	 </servlet-mapping>
	  
    <servlet-mapping>
        <servlet-name>mavenTest</servlet-name>
        <!--
        第一种：*.action，访问以action结尾由DispatcherServlet进行解析
        第二种：/，所有的访问的地址都由DispatcherServlet进行解析，对于静态的文件我们希望不用DispatcherServlet解析,
        需要在springMvc.xml中添加静态资源映射！！。
        使用此种方法可以实现RESTful风格的url
        第三种：/*,这种配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp，不能根据jsp页面找到handler，会报错
         -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
     <error-page>
	  	<error-code>500</error-code>
	  	<location>/WEB-INF/view/error/500.jsp</location>
	 </error-page>
	 <error-page>
	  	<error-code>404</error-code>
	  	<location>/WEB-INF/view/error/404.jsp</location>
	  </error-page>

    <!-- post乱码过滤器 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
      <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
</web-app>
